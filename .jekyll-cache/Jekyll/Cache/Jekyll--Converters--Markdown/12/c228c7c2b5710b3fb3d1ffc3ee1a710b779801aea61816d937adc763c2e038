I"É<p><img src="https://miro.medium.com/max/910/1*-l3Qrum9oPMiiM0yW7v_Ng.png" alt="Git logo &gt;" height="100px" /></p>

<p>Getting started in git is surprisingly easy and provides a quick and simple way to ensure your scripts are saved online. Itâ€™s also a quick way to feel like a pro using the command line interface (CLI). In this post are the 7 commands you need to manage a simple repository.</p>

<!--description-->

<p>In short they are the following:</p>

<pre><code class="language-dcl">git clone
git init [url]
git status
git add
git commit -m "[message]"
git push
git pull
</code></pre>

<p>This is it. All youâ€™ll need to get you started if youâ€™re simply trying to maintain a basic respository. Keep reading for more detail on what these functions do.</p>

<h2 id="downloading-and-using-git">Downloading and using git</h2>

<p>To <strong>download git</strong> to your machine, go <a href="https://git-scm.com/downloads">here</a>.</p>

<p><strong>Using git</strong> is done from your command line or CLI. Most likely you can open a terminal from your text editor as well. Both Jupyter Labs/Notebook and Visual Studio code have a CLI.</p>

<p>You can check that git has installed correctly by typing in <code class="highlighter-rouge">git --version</code> into the command line. This should return the version number installed.</p>

<h2 id="getting-started">Getting started</h2>

<p>There are two ways first make the connection through git between Github and your computer</p>

<ol>
  <li>You create a folder on Github and clone it to your computer</li>
  <li>You create the folder on your computer or use an existing one</li>
</ol>

<p>For both of these steps, the first thing youâ€™ll need to do is navigate your folder directory via the command line. This is essentially pointing the CLI at your desired location. Learning how to do this is a key skill for any would-be programmer.</p>

<h3 id="option-one-creating-the-folderrepository-on-github">Option One: Creating the folder/repository on Github</h3>

<p>For those who have created a repository already on Github, youâ€™ll need to <strong>clone</strong> the folder to your computer. First, navigate to the parent folder where you want your repository to appear.</p>

<p>For example, if you named your repository â€˜test_repoâ€™ on Github and you want it to appear in â€˜C:\Users\ryanf\Documents&gt;â€™ then you would make this your directory in the CLI using <code class="highlighter-rouge">cd C:\Users\ryanf\Documents&gt;</code>.</p>

<p>Now youâ€™ll need to grab the clone URL from your repository on Github. Then use the following command:</p>

<pre><code class="language-dcl">git clone https://github.com/rfoxoptimisation/rfoxoptimisation.github.io.git
</code></pre>

<p>You should see your repository appear as a folder in your files.</p>

<h3 id="option-two-you-already-have-a-folder-on-your-computer">Option Two: You already have a folder on your computer</h3>

<p>In this case, youâ€™ll simply need to walk the directory tree until the directory is the folder you want to link to Github. For example, if I want to link my â€˜test_repoâ€™ folder then I should have <code class="highlighter-rouge">C:\Users\ryanf\Documents&gt;\test_repo</code> in the command line before I start using git commands.</p>

<p>Once youâ€™ve navigated to here, use:</p>

<pre><code class="language-dcl">git init
</code></pre>

<p>Now, to finish the link to Github, create a repository on <a href="https://github.com/">Github</a> and follow the instructions for â€˜Push an existing repositoryâ€¦â€™.</p>

<p>These getting started steps youâ€™ll only need to do this the one time. When I first set this up on laptop, I wondered whether Iâ€™d have to set up the link again the next time I turned on my computer. But it will still be there and you can use <code class="highlighter-rouge">git status</code> mentioned below to check.</p>

<h2 id="everyday-git">Everyday git</h2>

<p>Now youâ€™ve got your folder on Github and your computer, here are the everyday commands youâ€™ll need to keep your repository up-to-date.</p>

<h3 id="status-check">Status check</h3>

<pre><code class="language-dcl">git status
</code></pre>

<p>This is your sanity check and harmless command. You canâ€™t break anything with this command and it doesnâ€™t do anything other than give you a status update. This will tell you what has been modified, deleted or added. I will usually run this in the CLI to before doing any commits or pushes as this will tell you whatâ€™s to be updated</p>

<h3 id="pushing-vs-pulling">Pushing vs pulling</h3>

<p>For me, Iâ€™m almost solely pushing files to Github and rarely pulling them. What this means is that I am more regularly creating files in the linked folder on my laptop and sending them to Github rather than doing it the other way round.</p>

<p>An example: I usually write posts for this blog using VSCode. I save these into a linked folder on my laptop and then use the below commands to send this to Github.</p>

<p>The only case usually where I might make edits in Github are if I get prompted to add a readme or I make a small copy change. In this case Iâ€™ll then need to â€˜pullâ€™ the content from Github when Iâ€™m working from the command line again. Youâ€™ll be prompted from git if you need to make a pull request the next time you try to push.</p>

<h3 id="add-commit-and-push">Add, commit and push</h3>

<p>These, along with <code class="highlighter-rouge">git status</code> are the three commands youâ€™ll find yourself using every single time you use git.</p>

<p>Once youâ€™ve made changes to your project and you are happy to add this to the repository formally, use the following.</p>

<pre><code class="language-dcl">git add .
</code></pre>

<p>Using the full stop at the end adds all the changes youâ€™ve made to any files in the folder. If you use <code class="highlighter-rouge">git status</code> before and after adding the files, youâ€™ll see that the files move from â€˜Changes not staged for commitâ€™ to â€˜Changes to be commitedâ€™. This is the next step.</p>

<pre><code class="language-dcl">git commit -m "Message here"
</code></pre>

<p>This is the second step in pushing your change to Github. Write a commit message so you can see what changes you made to your files. Warning, if you forget the <code class="highlighter-rouge">-m "[message]"</code> then youâ€™re going to find yourself in a weird Vim situation. <a href="https://medium.com/rightindem-design-team/how-to-never-get-stuck-in-vim-again-edaee4d632bd">Here</a> is an article I enjoyed about how to get out of this.</p>

<pre><code class="language-dcl">git push
</code></pre>

<p>This final command will push your changes to Github. All in all a very satifying process.</p>

<h3 id="pull">Pull</h3>

<p>This is for those times mentioned above when the repository you have on your computer is behind the latest commits.</p>

<pre><code class="language-dcl">git pull
</code></pre>

<p>Running this command will bring you up to date and if youâ€™re working on a larger project, you will find yourself needing this often along with many other commands out of scope for this post.</p>

<h2 id="feel-like-a-pro">Feel like a pro</h2>

<p>Thatâ€™s it! These commands will take you far and youâ€™ll find them coming to you very easily after a few commits and pushes. Actually using the command line for a legitimate reason felt like a big step into the programming world and I hope this will help anyone going forward as well.</p>

<p>Thereâ€™s no need to use Github desktop when itâ€™s this simple and it looks far more professional to use git from the CLI.</p>
:ET